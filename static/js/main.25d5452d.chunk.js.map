{"version":3,"sources":["components/Navbar.tsx","App.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","api.ts","components/Loader/Loader.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["Navbar","linkClass","isActive","classNames","className","role","to","App","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","PeopleFilters","setSearchParams","sex","get","centuries","getAll","query","addCenturies","century","centuryArray","includes","splice","indexOf","type","placeholder","onChange","e","target","searchFilter","href","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PeopleTable","useState","people","setPeople","personSlug","useParams","isLoading","setIsLoading","isLoadingError","setIsLoadingError","isSelected","setIsSelected","copy","setCopy","sort","order","useEffect","getPeople","catch","finally","isAnchorHere","anchorName","find","person","name","getSortElementComparison","firstWord","secondWord","localeCompare","sortByTrigger","list","length","filter","some","dateOfBirth","String","slice","findCentury","born","first","second","died","toLowerCase","reverse","sortByName","sortBy","newPeople","JSON","stringify","map","slug","onClick","motherName","fatherName","PeoplePage","Root","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.25d5452d.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar = () => {\n  const linkClass = (\n    { isActive }: { isActive: boolean },\n  ) => classNames('navbar-item', { 'has-background-grey-lighter': isActive });\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink className={linkClass} to=\"/\">Home</NavLink>\n\n          <NavLink\n            aria-current=\"page\"\n            className={linkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex');\n  const centuries = searchParams.getAll('centuries');\n  const query = searchParams.get('query') || '';\n\n  function addFiltersMale() {\n    return { sex: 'm' };\n  }\n\n  function addFiltersFemale() {\n    return { sex: 'f' };\n  }\n\n  function addFiltersAllSex() {\n    return { sex: null };\n  }\n\n  function addCenturies(century: string) {\n    let centuryArray = searchParams.getAll('centuries') || [];\n\n    if (centuryArray.includes(century)) {\n      centuryArray.splice(centuries.indexOf(century), 1);\n    } else {\n      centuryArray = [...centuryArray, century];\n    }\n\n    return { centuries: centuryArray };\n  }\n\n  const params = new URLSearchParams(searchParams);\n\n  function searchFilter(e: React.ChangeEvent<HTMLInputElement>) {\n    if (!e.target.value) {\n      params.delete('query');\n    } else {\n      params.set('query', e.target.value);\n    }\n\n    setSearchParams(params);\n  }\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n\n        <SearchLink\n          className={classNames({ 'is-active': (sex !== 'm' && sex !== 'f') })}\n          params={addFiltersAllSex()}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'm' })}\n          params={addFiltersMale()}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          className={classNames({ 'is-active': sex === 'f' })}\n          params={addFiltersFemale()}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={(e) => searchFilter(e)}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            <SearchLink\n              data-cy=\"century\"\n              className={\n                classNames(\n                  'button mr-1', { 'is-info': centuries.includes('16') },\n                )\n              }\n              params={addCenturies('16')}\n            >\n              16\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={\n                classNames(\n                  'button mr-1', { 'is-info': centuries.includes('17') },\n                )\n              }\n              params={addCenturies('17')}\n            >\n              17\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={\n                classNames(\n                  'button mr-1', { 'is-info': centuries.includes('18') },\n                )\n              }\n              params={addCenturies('18')}\n            >\n              18\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={\n                classNames(\n                  'button mr-1', { 'is-info': centuries.includes('19') },\n                )\n              }\n              params={addCenturies('19')}\n            >\n              19\n            </SearchLink>\n\n            <SearchLink\n              data-cy=\"century\"\n              className={\n                classNames(\n                  'button mr-1', { 'is-info': centuries.includes('20') },\n                )\n              }\n              params={addCenturies('20')}\n            >\n              20\n            </SearchLink>\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <a\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              href=\"#/people\"\n            >\n              All\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to=\"/people\"\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  Link,\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\nimport {\n  useEffect,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport { getPeople } from '../api';\nimport { Person } from '../types/Person';\nimport { Loader } from './Loader';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\n\nexport const PeopleTable: React.FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const { personSlug } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n  const [isSelected, setIsSelected] = useState(false);\n  const [copy, setCopy] = useState<Person[]>([]);\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n  const params = new URLSearchParams(searchParams);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(response => {\n        setPeople(response);\n        setCopy([...response]);\n      })\n      .catch(() => setIsLoadingError(true))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  const isAnchorHere = (anchorName: string | null): Person | undefined => {\n    if (anchorName) {\n      return people.find(person => person.name === anchorName);\n    }\n\n    return undefined;\n  };\n\n  function getSortElementComparison(firstWord: string, secondWord: string) {\n    return firstWord.localeCompare(secondWord);\n  }\n\n  function findCentury(dateOfBirth: Person['born'], century: string) {\n    const result = (+century - 1) === +(String(dateOfBirth).slice(0, -2));\n\n    return result;\n  }\n\n  function sortByTrigger() {\n    let list = [...copy];\n\n    if (centuries.length) {\n      list = list.filter((person) => {\n        return centuries.some((century) => findCentury(person.born, century));\n      });\n    }\n\n    if (sort === 'sex') {\n      list.sort(\n        (first, second) => getSortElementComparison(first.sex, second.sex),\n      );\n    }\n\n    if (sort === 'born') {\n      list.sort(\n        (first, second) => (first.born > second.born ? 1 : -1),\n      );\n    }\n\n    if (sort === 'died') {\n      list.sort(\n        (first, second) => (first.died > second.died ? 1 : -1),\n      );\n    }\n\n    if (query?.length) {\n      list = list.filter(person => (\n        person.name.toLowerCase().includes(query.toLowerCase())\n      ));\n    }\n\n    if (sex === 'm') {\n      list = list.filter(person => person.sex === 'm');\n    }\n\n    if (sex === 'f') {\n      list = list.filter(person => person.sex === 'f');\n    }\n\n    if (sort === 'name') {\n      list.sort(\n        (first, second) => getSortElementComparison(first.name, second.name),\n      );\n    }\n\n    if (order) {\n      list.reverse();\n    }\n\n    return list;\n  }\n\n  useEffect(() => {\n    const newPeople = sortByTrigger();\n\n    setPeople(newPeople);\n  }, [copy, sort, sex, order, query, JSON.stringify(centuries)]);\n\n  function sortByName(sortBy: string) {\n    if (sort && !order) {\n      return { sort: sortBy, order: 'desc' };\n    }\n\n    if (order) {\n      return { sort: null, order: null };\n    }\n\n    return { sort: sortBy };\n  }\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"block\">\n          {isLoadingError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n          {(people.length === 0 && !isLoadingError) && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n          <table\n            data-cy=\"peopleTable\"\n            className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n          >\n            {(people.length > 0) && (\n              <thead>\n                <tr>\n                  <th>\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      Name\n                      <SearchLink\n                        params={sortByName('name') as SearchParams}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"fas fa-sort\" />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  </th>\n\n                  <th>\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      Sex\n                      <SearchLink\n                        params={sortByName('sex') as SearchParams}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"fas fa-sort\" />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  </th>\n\n                  <th>\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      Born\n                      <SearchLink\n                        params={sortByName('born') as SearchParams}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"fas fa-sort\" />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  </th>\n\n                  <th>\n                    <span className=\"is-flex is-flex-wrap-nowrap\">\n                      Died\n                      <SearchLink\n                        params={sortByName('died') as SearchParams}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"fas fa-sort\" />\n                        </span>\n                      </SearchLink>\n                    </span>\n                  </th>\n\n                  <th>Mother</th>\n                  <th>Father</th>\n                </tr>\n              </thead>\n\n            )}\n            <tbody>\n              {people.map((person) => {\n                return (\n                  <tr\n                    data-cy=\"person\"\n                    key={person.slug}\n                    className={classNames({\n                      'has-background-warning':\n                        isSelected && person.slug === personSlug,\n                    })}\n                  >\n                    <td>\n                      <Link\n                        to={`/people/${person.slug}?${params}`}\n                        className={classNames({\n                          'has-text-danger': person.sex === 'f',\n                        })}\n                        onClick={() => setIsSelected(true)}\n                      >\n                        {person.name}\n                      </Link>\n                    </td>\n\n                    <td>{person.sex}</td>\n                    <td>{person.born}</td>\n                    <td>{person.died}</td>\n\n                    <td>\n                      {isAnchorHere(person.motherName) ? (\n                        <Link\n                          to={`/people/${isAnchorHere(person.motherName)?.slug}`}\n                          className=\"has-text-danger\"\n                          onClick={() => setIsSelected(false)}\n                        >\n                          {isAnchorHere(person.motherName)?.name}\n                        </Link>\n                      ) : (\n                        <>\n                          {person.motherName}\n                        </>\n                      )}\n                    </td>\n                    <td>\n                      {isAnchorHere(person.fatherName) ? (\n                        <Link\n                          to={`/people/${isAnchorHere(person.fatherName)?.slug}`}\n                          className={classNames({\n                            'has-text-danger': person.sex === 'f',\n                          })}\n                        >\n                          {isAnchorHere(person.fatherName)?.name}\n                        </Link>\n                      ) : (\n                        <>\n                          {person.fatherName}\n                        </>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n\n            </tbody>\n          </table>\n        </div>\n      )}\n    </>\n  );\n};\n","import { PeopleFilters } from './PeopleFilters';\nimport { PeopleTable } from './PeopleTable';\n\nexport const PeoplePage = () => {\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {/* <Loader /> */}\n\n              {/* <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n\n              <p data-cy=\"noPeopleMessage\">\n                There are no people on the server\n              </p> */}\n\n              {/* <p>There are no people matching the current search criteria</p> */}\n\n              <PeopleTable />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  HashRouter,\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<h1 className=\"title\">Home Page</h1>} />\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":personSlug\" element={<PeoplePage />} />\n        </Route>\n        <Route\n          path=\"*\"\n          element={<p className=\"title\">Page not found</p>}\n        />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}